---
import BaseLayout from "../layouts/BaseLayout.astro";
import { getCollection } from 'astro:content';

// SEO metadata for blog page
const pageTitle = "Blog";
const metaDescription =
    "Read my latest articles and thoughts on web development, programming, and technology.";
const metaKeywords =
    "blog, web development, programming, react, nextjs, typescript, javascript, laravel, tech articles";

// Function to calculate minutes to read
function calculateReadingTime(content: string): number {
    // Average reading speed (words per minute)
    const wordsPerMinute = 200;
    // Get the text content without code blocks (approximate)
    const text = content
        .replace(/```[\s\S]*?```/g, "") // Remove code blocks
        .replace(/\s+/g, " "); // Normalize whitespace

    // Count words (split by spaces)
    const words = text.split(" ").length;

    // Calculate reading time in minutes
    const minutes = Math.ceil(words / wordsPerMinute);

    return minutes < 1 ? 1 : minutes;
}

// Get posts from article collection
const articlePosts = await getCollection('article', ({ data }) => {
  // Filter out draft posts in production
  return import.meta.env.PROD ? !data.draft : true;
});

// Map article posts to a common format
const normalizedArticlePosts = articlePosts.map(post => {
  const minutesRead = post.data.minutesRead || calculateReadingTime(post.body);
  
  return {
    title: post.data.title,
    description: post.data.description,
    date: post.data.pubDate,
    author: post.data.author || "Fitra",
    slug: post.slug,
    collectionType: 'article',
    category: post.data.category || "",
    categoryColor: null, // Blog posts don't have category colors
    tags: post.data.tags || [],
    image: post.data.featuredImage || "",
    url: `/article/${post.slug}`,
    minutesRead: minutesRead,
  };
});

// Get posts from blog collection 
const blogPosts = await getCollection('blog', ({ data }) => {
  // Filter out draft posts in production
  return import.meta.env.PROD ? !data.draft : true;
});

// Map lifestyle posts to the same format
const normalizedLifestylePosts = blogPosts.map(post => {
  // Convert minutesRead to number if it's a string
  let minutesToRead = post.data.minutesRead;
  if (typeof minutesToRead === 'string') {
    minutesToRead = Number.parseInt(minutesToRead) || calculateReadingTime(post.body);
  } else if (!minutesToRead) {
    minutesToRead = calculateReadingTime(post.body);
  }
  
  return {
    title: post.data.title,
    description: post.data.excerpt, // Use excerpt as description for posts
    date: post.data.pubDate,
    author: post.data.author || "Fitra",
    slug: post.slug,
    collectionType: 'blog',
    category: post.data.category || "",
    categoryColor: post.data.categoryColor || null,
    tags: post.data.tags || [],
    image: post.data.featuredImg || "", // Note the different field name
    url: `/blog/${post.slug}`, // Different URL structure for posts
    minutesRead: minutesToRead,
  };
});

// Combine both post types
const combinedPosts = [...normalizedArticlePosts, ...normalizedLifestylePosts];

// Sort all posts by date (newest first)
const posts = combinedPosts.sort((a, b) => b.date.getTime() - a.date.getTime());

// Structured data for blog listing (JSON-LD)
const postStructuredData = {
    "@context": "https://schema.org",
    "@type": "Blog",
    headline: "DevFitra's Blog",
    description: metaDescription,
    author: {
        "@type": "Person",
        name: "Fitra",
    },
    blogPost: posts.map((post) => ({
        "@type": "BlogPosting",
        headline: post.title,
        description: post.description,
        datePublished: post.date.toISOString(),
    })),
};
---

<style>
  .blog__container {
    padding: 2rem;
    max-width: 800px;
    margin: 0 auto;
  }

  .blog__header {
    margin-bottom: 3rem;
    text-align: center;
  }

  .blog__title {
    margin-bottom: 1rem;
  }

  .blog__description {
    color: var(--color-text-light);
  }

  .blog__post-list {
    display: grid;
    gap: 2rem;
  }

  .blog__post {
    border: 1px solid var(--color-border);
    border-radius: 8px;
    padding: 1.5rem;
    transition: transform 0.2s ease-in-out;
  }

  .blog__post:hover {
    transform: translateY(-5px);
  }

  .blog__post-title {
    margin-bottom: 0.5rem;
    color: var(--color-text);
  }

  .blog__post-meta {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .blog__post-date,
  .blog__post-read-time {
    font-size: 0.875rem;
    color: var(--color-text-light);
  }
  
  .blog__post-category {
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    border-radius: 100px;
    background-color: #333;
    color: #fff;
  }

  .blog__post-meta-separator {
    color: var(--color-text-light);
    font-size: 0.875rem;
  }

  .blog__post-description {
    margin-bottom: 1rem;
  }

  .blog__post-link {
    display: inline-block;
    background-color: #333;
    color: #fff;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    text-decoration: none;
    transition: background-color 0.2s ease-in-out;
  }

  .blog__post-link:hover {
    background-color: #444;
  }

  .blog__post-featured {
    display: flex;
    flex-direction: column;
    border-radius: 8px;
    overflow: hidden;
    margin-bottom: 2rem;
    background-color: var(--color-border);
  }

  .blog__post-featured-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
  }

  .blog__post-featured-content {
    padding: 1.5rem;
  }

  @media (max-width: 768px) {
    .blog__container {
      padding: 1rem;
    }
  }
</style>

<BaseLayout
  pageTitle={pageTitle}
  metaDescription={metaDescription}
  metaKeywords={metaKeywords}
>
  <div class="blog__container">
    <header class="blog__header">
      <h1 class="blog__title text-gradient">Blog & Article</h1>
      <p class="blog__description">Thoughts, ideas, and insights on web development and technology.</p>
    </header>

    {posts.length > 0 && posts[0] && (
      <article class="blog__post-featured">
        {posts[0].image && (
          <img 
            class="blog__post-featured-image" 
            src={posts[0].image} 
            alt={posts[0].title}
            onerror="this.src='https://placehold.co/800x400/252525/CCCCCC?text=NO IMAGE'; this.onerror=null;"
          />
        )}
        <div class="blog__post-featured-content">
          <h2 class="blog__post-title">{posts[0].title}</h2>
          <div class="blog__post-meta">
            <time class="blog__post-date" datetime={posts[0].date.toISOString()}>
              {posts[0].date.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              })}
            </time>
            {posts[0].minutesRead && (
              <>
                <span class="blog__post-meta-separator">•</span>
                <span class="blog__post-read-time">{posts[0].minutesRead} min read</span>
              </>
            )}
            {posts[0].category && (
              <>
                <span class="blog__post-meta-separator">•</span>
                <span class="blog__post-category" style={posts[0].categoryColor ? `background-color: ${posts[0].categoryColor}; color: #333;` : ''}>
                  {posts[0].category}
                </span>
              </>
            )}
          </div>
          <p class="blog__post-description">{posts[0].description}</p>
          <a href={posts[0].url} class="blog__post-link">Read more</a>
        </div>
      </article>
    )}

    <div class="blog__post-list">
      {posts.length === 0 ? (
        <p>No posts yet. Check back soon!</p>
      ) : (
        posts.slice(1).map(post => (
          <article class="blog__post">
            <h2 class="blog__post-title">{post.title}</h2>
            <div class="blog__post-meta">
              <time class="blog__post-date" datetime={post.date.toISOString()}>
                {post.date.toLocaleDateString('en-US', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric'
                })}
              </time>
              {post.minutesRead && (
                <>
                  <span class="blog__post-meta-separator">•</span>
                  <span class="blog__post-read-time">{post.minutesRead} min read</span>
                </>
              )}
              {post.category && (
                <>
                  <span class="blog__post-meta-separator">•</span>
                  <span class="blog__post-category" style={post.categoryColor ? `background-color: ${post.categoryColor}; color: #333;` : ''}>
                  {post.category}
                </span>
                </>
              )}
            </div>
            <p class="blog__post-description">{post.description}</p>
            <a href={post.url} class="blog__post-link">Read more</a>
          </article>
        ))
      )}
    </div>
  </div>

  {/* Add JSON-LD structured data */}
  <script type="application/ld+json" set:html={JSON.stringify(postStructuredData)} />
</BaseLayout>
